version: '3.8'

services:
  # Binance Trader MACD Testnet Service
  binance-trader-macd-testnet:
    build: 
      context: .
      dockerfile: binance-trader-macd/Dockerfile
    container_name: binance-trader-macd-testnet
    env_file:
      - testnet.env
    environment:
      - SPRING_PROFILES_ACTIVE=testnet
      - BINANCE_REST_BASE_URL=${BINANCE_REST_BASE_URL:-https://testnet.binance.vision}
      - BINANCE_API_KEY=${BINANCE_API_KEY:-F4vS8U6mvUXST5TVbQbnMlUL4jOpQiI1Iy8QlVqXpVNMAxplu8pamFDZLB5mpOwU}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET:-N26b6O6QlHmprRf40wEECqAEQjaD4ijMdIx5GRdBk0e34iTnVDRmFxZzrjgleT20}
      - BINANCE_TRADER_TEST_ORDER_MODE_ENABLED=${BINANCE_TRADER_TEST_ORDER_MODE_ENABLED:-true}
      - TESTNET_API_KEY=${TESTNET_API_KEY:-F4vS8U6mvUXST5TVbQbnMlUL4jOpQiI1Iy8QlVqXpVNMAxplu8pamFDZLB5mpOwU}
      - TESTNET_SECRET_KEY=${TESTNET_SECRET_KEY:-N26b6O6QlHmprRf40wEECqAEQjaD4ijMdIx5GRdBk0e34iTnVDRmFxZzrjgleT20}
      - TESTNET_API_URL=${TESTNET_API_URL:-https://testnet.binance.vision}
    ports:
      - "8083:8080"
    depends_on:
      - postgres-testnet
      - elasticsearch-testnet
      - kafka-testnet
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database for Testnet
  postgres-testnet:
    image: postgres:15-alpine
    container_name: postgres-testnet
    environment:
      - POSTGRES_DB=binance_trader_testnet
      - POSTGRES_USER=testnet_user
      - POSTGRES_PASSWORD=testnet_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_testnet_data:/var/lib/postgresql/data
      - ./binance-trader-macd/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testnet_user -d binance_trader_testnet"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Testnet
  elasticsearch-testnet:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-testnet
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.routing.allocation.disk.threshold_enabled=false
      - cluster.routing.allocation.disk.watermark.low=95%
      - cluster.routing.allocation.disk.watermark.high=98%
      - cluster.routing.allocation.disk.watermark.flood_stage=99%
    ports:
      - "9202:9200"
    volumes:
      - elasticsearch_testnet_data:/usr/share/elasticsearch/data
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka for Testnet
  kafka-testnet:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-testnet
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-testnet:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9095,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9095,PLAINTEXT_INTERNAL://kafka-testnet:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9095:9095"
    depends_on:
      - zookeeper-testnet
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9095"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Zookeeper for Kafka Testnet
  zookeeper-testnet:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-testnet
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Schema Registry for Testnet
  schema-registry-testnet:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry-testnet
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-testnet
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-testnet:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8082:8081"
    depends_on:
      - kafka-testnet
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for Testnet Monitoring
  prometheus-testnet:
    image: prom/prometheus:latest
    container_name: prometheus-testnet
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/testnet-prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Binance Data Collection Service for Testnet
  binance-data-collection-testnet:
    build:
      context: .
      dockerfile: binance-data-collection/Dockerfile
    container_name: binance-data-collection-testnet
    env_file:
      - testnet.env
    environment:
      - SPRING_PROFILES_ACTIVE=testnet
      - BINANCE_REST_BASE_URL=${BINANCE_REST_BASE_URL:-https://testnet.binance.vision}
      - BINANCE_API_KEY=${BINANCE_API_KEY:-F4vS8U6mvUXST5TVbQbnMlUL4jOpQiI1Iy8QlVqXpVNMAxplu8pamFDZLB5mpOwU}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET:-N26b6O6QlHmprRf40wEECqAEQjaD4ijMdIx5GRdBk0e34iTnVDRmFxZzrjgleT20}
    ports:
      - "8086:8080"
    depends_on:
      - postgres-testnet
      - elasticsearch-testnet
      - kafka-testnet
      - schema-registry-testnet
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Binance Data Storage Testnet Service
  binance-data-storage-testnet:
    build: 
      context: .
      dockerfile: binance-data-storage/Dockerfile
    container_name: binance-data-storage-testnet
    env_file:
      - testnet.env
    environment:
      - SPRING_PROFILES_ACTIVE=testnet
    ports:
      - "8087:8081"
    depends_on:
      - postgres-testnet
      - elasticsearch-testnet
      - kafka-testnet
      - schema-registry-testnet
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Health Metrics Exporter for Testnet
  health-metrics-exporter:
    image: nginx:alpine
    container_name: health-metrics-exporter
    ports:
      - "8091:80"
    volumes:
      - ./scripts/health-exporter-nginx.conf:/etc/nginx/nginx.conf
      - ./scripts/health-metrics.sh:/usr/local/bin/health-metrics.sh
      - ./scripts/health-metrics.txt:/usr/local/bin/health-metrics.txt
    networks:
      - testnet-network
    command: >
      sh -c "
        apk add --no-cache curl jq &&
        chmod +x /usr/local/bin/health-metrics.sh &&
        nginx -g 'daemon off;'
      "
    restart: unless-stopped
    depends_on:
      - postgres-testnet
      - kafka-testnet
      - elasticsearch-testnet
      - binance-trader-macd-testnet
      - binance-data-collection-testnet

  # Grafana for Testnet Dashboard
  grafana-testnet:
    image: grafana/grafana:latest
    container_name: grafana-testnet
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=testnet_admin
    volumes:
      - grafana_testnet_data:/var/lib/grafana
      - ./monitoring/grafana/datasources/prometheus-testnet.yml:/etc/grafana/provisioning/datasources/prometheus.yml
      - ./monitoring/grafana/provisioning/dashboards/testnet-dashboards.yml:/etc/grafana/provisioning/dashboards/testnet-dashboards.yml
      - ./monitoring/grafana/dashboards/binance-trading:/etc/grafana/provisioning/dashboards/binance-trading
      - ./monitoring/grafana/dashboards/system-monitoring:/etc/grafana/provisioning/dashboards/system-monitoring
      - ./monitoring/grafana/dashboards/analytics:/etc/grafana/provisioning/dashboards/analytics
      - ./monitoring/grafana/dashboards/strategies:/etc/grafana/provisioning/dashboards/strategies
    depends_on:
      - prometheus-testnet
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  testnet-network:
    driver: bridge

volumes:
  postgres_testnet_data:
  elasticsearch_testnet_data:
  grafana_testnet_data:
