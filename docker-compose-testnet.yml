version: '3.8'

services:
  # Binance Trader MACD Testnet Service
  binance-trader-macd-testnet:
    build: 
      context: ./binance-trader-macd
      dockerfile: Dockerfile
    container_name: binance-trader-macd-testnet
    environment:
      - SPRING_PROFILES_ACTIVE=testnet
      - TESTNET_API_KEY=${TESTNET_API_KEY}
      - TESTNET_SECRET_KEY=${TESTNET_SECRET_KEY}
      - BINANCE_REST_BASE_URL=https://testnet.binance.vision
      - BINANCE_API_KEY=${TESTNET_API_KEY}
      - BINANCE_API_SECRET=${TESTNET_SECRET_KEY}
      - BINANCE_TRADER_TEST_ORDER_MODE_ENABLED=true
    ports:
      - "8080:8080"
    depends_on:
      - postgres-testnet
      - elasticsearch-testnet
      - kafka-testnet
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database for Testnet
  postgres-testnet:
    image: postgres:15-alpine
    container_name: postgres-testnet
    environment:
      - POSTGRES_DB=binance_trader_testnet
      - POSTGRES_USER=testnet_user
      - POSTGRES_PASSWORD=testnet_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_testnet_data:/var/lib/postgresql/data
      - ./binance-trader-macd/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testnet_user -d binance_trader_testnet"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Testnet
  elasticsearch-testnet:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-testnet
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9201:9200"
    volumes:
      - elasticsearch_testnet_data:/usr/share/elasticsearch/data
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka for Testnet
  kafka-testnet:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-testnet
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-testnet:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093,PLAINTEXT_INTERNAL://kafka-testnet:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper-testnet
    networks:
      - testnet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka Testnet
  zookeeper-testnet:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-testnet
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    networks:
      - testnet-network
    restart: unless-stopped

  # Schema Registry for Testnet
  schema-registry-testnet:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry-testnet
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-testnet
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-testnet:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8082:8081"
    depends_on:
      - kafka-testnet
    networks:
      - testnet-network
    restart: unless-stopped

  # Prometheus for Testnet Monitoring
  prometheus-testnet:
    image: prom/prometheus:latest
    container_name: prometheus-testnet
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-testnet.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - testnet-network
    restart: unless-stopped

  # Grafana for Testnet Dashboard
  grafana-testnet:
    image: grafana/grafana:latest
    container_name: grafana-testnet
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=testnet_admin
    volumes:
      - grafana_testnet_data:/var/lib/grafana
      - ./monitoring/grafana/datasources/prometheus-testnet.yml:/etc/grafana/provisioning/datasources/prometheus.yml
    depends_on:
      - prometheus-testnet
    networks:
      - testnet-network
    restart: unless-stopped

networks:
  testnet-network:
    driver: bridge

volumes:
  postgres_testnet_data:
  elasticsearch_testnet_data:
  grafana_testnet_data:
