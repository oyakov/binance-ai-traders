# ============================================================================
# Binance AI Traders - Testnet Environment Configuration Template
# ============================================================================
# 
# ⚠️  SECURITY NOTICE:
# - This is a TEMPLATE file. Do NOT put actual secrets here.
# - Copy this file to testnet.env and fill in real values
# - Never commit testnet.env to git
# - Use scripts/security/setup-secrets.ps1 to generate strong passwords
# - Encrypt with scripts/security/encrypt-secrets.ps1 before storing
#
# ============================================================================

# ----------------------------------------------------------------------------
# Binance API Credentials (Testnet)
# ----------------------------------------------------------------------------
# Get testnet API keys from: https://testnet.binance.vision/
# ⚠️  Never use mainnet keys in testnet environment!

TESTNET_API_KEY=<your-binance-testnet-api-key-here>
TESTNET_SECRET_KEY=<your-binance-testnet-secret-key-here>

BINANCE_REST_BASE_URL=https://testnet.binance.vision
BINANCE_API_KEY=${TESTNET_API_KEY}
BINANCE_API_SECRET=${TESTNET_SECRET_KEY}
BINANCE_TRADER_TEST_ORDER_MODE_ENABLED=true

# Optional: Additional API endpoints
TESTNET_API_URL=https://testnet.binance.vision

# ----------------------------------------------------------------------------
# PostgreSQL Database Configuration
# ----------------------------------------------------------------------------
# Generate strong password with: scripts/security/setup-secrets.ps1
# Password requirements: 32+ chars, alphanumeric + symbols

POSTGRES_DB=binance_trader_testnet
POSTGRES_USER=testnet_user
POSTGRES_PASSWORD=<generate-strong-password-32-chars>
POSTGRES_HOST=postgres-testnet
POSTGRES_PORT=5432

# Connection string (auto-generated, don't modify)
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# ----------------------------------------------------------------------------
# Elasticsearch Configuration
# ----------------------------------------------------------------------------
# Generate strong password with: scripts/security/setup-secrets.ps1

ELASTICSEARCH_HOST=elasticsearch-testnet
ELASTICSEARCH_PORT=9200
ELASTICSEARCH_USERNAME=elastic
ELASTICSEARCH_PASSWORD=<generate-strong-password-32-chars>
ELASTICSEARCH_SCHEME=http

# Connection URL (auto-generated, don't modify)
ELASTICSEARCH_URL=${ELASTICSEARCH_SCHEME}://${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}@${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}

# ----------------------------------------------------------------------------
# Kafka Configuration
# ----------------------------------------------------------------------------
# For production, enable SASL/SCRAM authentication

KAFKA_BROKER=kafka-testnet:29092
KAFKA_BOOTSTRAP_SERVERS=kafka-testnet:29092
SCHEMA_REGISTRY_URL=http://schema-registry-testnet:8081

# Kafka SASL credentials (leave empty for PLAINTEXT, fill for SASL/SCRAM)
KAFKA_SASL_USERNAME=
KAFKA_SASL_PASSWORD=
KAFKA_SECURITY_PROTOCOL=PLAINTEXT

# ----------------------------------------------------------------------------
# Grafana Configuration
# ----------------------------------------------------------------------------
# Generate strong admin password with: scripts/security/setup-secrets.ps1
# Default username: admin

GF_SECURITY_ADMIN_USER=admin
GF_SECURITY_ADMIN_PASSWORD=<generate-strong-password-32-chars>
GF_SERVER_ROOT_URL=https://your-domain.com/grafana
GF_AUTH_ANONYMOUS_ENABLED=false
GF_AUTH_DISABLE_LOGIN_FORM=false

# ----------------------------------------------------------------------------
# API Authentication (Application Layer)
# ----------------------------------------------------------------------------
# Generate API keys with: scripts/security/setup-secrets.ps1 -GenerateApiKeys
# Format: btai_testnet_<32-random-chars>

API_KEY_ADMIN=btai_testnet_<generate-api-key-here>
API_KEY_MONITORING=btai_testnet_<generate-api-key-here>
API_KEY_READONLY=btai_testnet_<generate-api-key-here>

# API key for Prometheus metrics scraping
PROMETHEUS_BEARER_TOKEN=<generate-strong-token-64-chars>

# ----------------------------------------------------------------------------
# Application Configuration
# ----------------------------------------------------------------------------

# Spring Boot profile
SPRING_PROFILES_ACTIVE=testnet

# Trading configuration
TRADER_ENABLED=true
TRADER_TEST_MODE=true
TRADER_MAX_POSITION_SIZE=1000
TRADER_RISK_LEVEL=MEDIUM

# MACD Strategy parameters
MACD_FAST_PERIOD=12
MACD_SLOW_PERIOD=26
MACD_SIGNAL_PERIOD=9
MACD_ENABLED=true

# Monitored symbols and intervals
MONITORED_SYMBOLS=BTCUSDT,ETHUSDT,BNBUSDT
MONITORED_INTERVALS=5m,15m,1h

# ----------------------------------------------------------------------------
# TLS/SSL Configuration
# ----------------------------------------------------------------------------
# Certificate paths (if using custom certificates)

SSL_CERT_PATH=/etc/ssl/certs/cert.pem
SSL_KEY_PATH=/etc/ssl/private/key.pem
SSL_CA_PATH=/etc/ssl/certs/ca.pem

# PostgreSQL SSL mode
POSTGRES_SSL_MODE=prefer

# ----------------------------------------------------------------------------
# Nginx Reverse Proxy Configuration
# ----------------------------------------------------------------------------

DOMAIN_NAME=your-domain.com
LETSENCRYPT_EMAIL=admin@your-domain.com

# ----------------------------------------------------------------------------
# Monitoring and Alerting
# ----------------------------------------------------------------------------

# Prometheus configuration
PROMETHEUS_RETENTION_DAYS=30
PROMETHEUS_SCRAPE_INTERVAL=15s

# Alert notification (optional)
ALERT_EMAIL=alerts@your-domain.com
ALERT_SLACK_WEBHOOK=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# ----------------------------------------------------------------------------
# Backup Configuration
# ----------------------------------------------------------------------------

BACKUP_ENABLED=true
BACKUP_RETENTION_DAYS=30
BACKUP_S3_BUCKET=
BACKUP_S3_REGION=
BACKUP_S3_ACCESS_KEY=
BACKUP_S3_SECRET_KEY=

# ----------------------------------------------------------------------------
# Feature Flags
# ----------------------------------------------------------------------------

ENABLE_BACKTESTING=true
ENABLE_PAPER_TRADING=true
ENABLE_LIVE_TRADING=false
ENABLE_TELEGRAM_NOTIFICATIONS=false

# ----------------------------------------------------------------------------
# Logging Configuration
# ----------------------------------------------------------------------------

LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_OUTPUT=stdout

# ----------------------------------------------------------------------------
# Rate Limiting
# ----------------------------------------------------------------------------

RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS_PER_MINUTE=10
RATE_LIMIT_BURST_SIZE=20

# ----------------------------------------------------------------------------
# Session Configuration
# ----------------------------------------------------------------------------

SESSION_TIMEOUT_HOURS=24
SESSION_SECRET=<generate-strong-secret-64-chars>

# ----------------------------------------------------------------------------
# Deployment Metadata (Optional)
# ----------------------------------------------------------------------------

DEPLOYMENT_ENV=testnet
DEPLOYMENT_VERSION=1.0.0
DEPLOYMENT_DATE=2025-10-18
GIT_COMMIT_SHA=

# ============================================================================
# End of Configuration Template
# ============================================================================
#
# NEXT STEPS:
# 1. Copy this file: cp testnet.env.template testnet.env
# 2. Generate secrets: .\scripts\security\setup-secrets.ps1
# 3. Fill in actual values in testnet.env
# 4. Encrypt: .\scripts\security\encrypt-secrets.ps1
# 5. Commit testnet.env.enc to git (encrypted version is safe)
# 6. Delete plaintext testnet.env from your local machine
#
# DEPLOYMENT:
# 1. Transfer testnet.env.enc to VPS
# 2. Decrypt on VPS: sops -d testnet.env.enc > testnet.env
# 3. Deploy with: docker compose --env-file testnet.env up -d
#
# ============================================================================

