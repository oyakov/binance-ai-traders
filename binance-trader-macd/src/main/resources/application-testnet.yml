spring:
  config:
    import: classpath:testnet-strategies.yml
  application:
    name: binance-trader-macd
  elasticsearch:
    uris: http://elasticsearch:9200
    username: elastic
    password: admin
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  flyway:
    enabled: true
    mixed: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    history-table: schema_version
  kafka:
    bootstrap-servers: kafka:9092
    properties:
      schema.registry.url: http://schema-registry:8081
      schema.registry.max.retries: 5
      schema.registry.retry.backoff.ms: 1000
      security.protocol: PLAINTEXT
      auto.register.schemas: true
      use.latest.version: true
      specific.avro.reader: true
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        enable.idempotence: true
        acks: all
        retries: 3
        max.in.flight.requests.per.connection: 1
        schema.registry.url: http://schema-registry:8081
        use.latest.version: true
        specific.avro.reader: true
        value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
    consumer:
      bootstrap-servers: kafka:9092
      group-id: test-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
        schema.registry.url: http://schema-registry:8081
        auto.register.schemas: true
        use.latest.version: true
        value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
      auto-offset-reset: earliest

binance:
  rest:
    base-url: ${BINANCE_REST_BASE_URL:https://testnet.binance.vision}
    api-token: ${BINANCE_API_KEY:}
    secret-api-token: ${BINANCE_API_SECRET:}
  websocket:
    base-url: wss://stream.testnet.binance.vision/ws
  testnet:
    api:
      url: ${TESTNET_API_URL:https://testnet.binance.vision}
      key: ${TESTNET_API_KEY:}
      secret: ${TESTNET_SECRET_KEY:}
    enabled: true
  trader:
    test-order-mode-enabled: ${BINANCE_TRADER_TEST_ORDER_MODE_ENABLED:true}
    stop-loss-percentage: 0.98
    take-profit-percentage: 1.05
    order-quantity: 0.05
    sliding-window-size: 78
  data:
    kline:
      entity-name: kline
      kafka-topic: binance-kline
      kafka-consumer-group: binance-data-storage
      intervals: 1m,3m,5m,15m,30m,1h,2h,4h,6h,8h,12h,1d,3d,1w,1M
      symbols: btcusdt,ethusdt,bnbusdt,adausdt,dogeusdt,xrpusdt,dotusdt,ltcusdt,linkusdt,uniusdt

trader:
  testnet:
    enabled: true
    virtual-balance: 10000
    max-position-size: 0.1
    risk-level: MEDIUM

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true

