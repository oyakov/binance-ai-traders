# Binance AI Traders - API Gateway Routing Configuration
# ============================================================================
# Service-specific routing rules for reverse proxy
# ============================================================================

# ============================================================================
# MACD Trader Service Routes
# ============================================================================

location ~ ^/api/v1/(macd|trader|signals|orders|backtest|testnet)/ {
    limit_req zone=api_limit burst=5 nodelay;
    
    # API key required
    if ($http_x_api_key = "") {
        return 401 '{"error":"Unauthorized","message":"X-API-Key header required"}';
    }
    
    proxy_pass http://trader_macd;
    
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-API-Key $http_x_api_key;
    
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 60s;  # Longer timeout for backtesting
    
    proxy_buffering off;
    proxy_request_buffering off;
    
    # Add CORS headers if needed
    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, X-API-Key, Content-Type" always;
    add_header Access-Control-Max-Age 3600 always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }
}

# ============================================================================
# Data Collection Service Routes
# ============================================================================

location ~ ^/api/v1/(collection|websocket|binance)/ {
    limit_req zone=api_limit burst=5 nodelay;
    
    # API key required
    if ($http_x_api_key = "") {
        return 401 '{"error":"Unauthorized","message":"X-API-Key header required"}';
    }
    
    proxy_pass http://data_collection;
    
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-API-Key $http_x_api_key;
    
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    proxy_buffering off;
}

# ============================================================================
# Data Storage Service Routes
# ============================================================================

location ~ ^/api/v1/(storage|klines?|elasticsearch|postgres)/ {
    limit_req zone=api_limit burst=5 nodelay;
    
    # API key required
    if ($http_x_api_key = "") {
        return 401 '{"error":"Unauthorized","message":"X-API-Key header required"}';
    }
    
    proxy_pass http://data_storage;
    
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-API-Key $http_x_api_key;
    
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    proxy_buffering off;
}

# ============================================================================
# Grafana Dashboard (Authenticated)
# ============================================================================

location /grafana/ {
    limit_req zone=api_limit burst=10 nodelay;
    
    # Grafana has its own authentication
    proxy_pass http://grafana/;
    
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    
    # WebSocket support for live updates
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 90s;
    
    proxy_buffering off;
    
    # Grafana-specific headers
    proxy_set_header Authorization $http_authorization;
    proxy_pass_header Authorization;
}

# ============================================================================
# Prometheus Metrics (Internal Only - Authenticated with Bearer Token)
# ============================================================================

location /prometheus/ {
    # Very restrictive rate limit for Prometheus
    limit_req zone=api_limit burst=2 nodelay;
    
    # Bearer token authentication
    if ($http_authorization = "") {
        return 401 '{"error":"Unauthorized","message":"Authorization header required"}';
    }
    
    proxy_pass http://prometheus/;
    
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    # Pass authentication header
    proxy_set_header Authorization $http_authorization;
    proxy_pass_header Authorization;
}

# ============================================================================
# Block Access to Internal Endpoints
# ============================================================================

# Block actuator endpoints (should only be accessed internally)
location ~ ^/actuator/ {
    return 403 '{"error":"Forbidden","message":"Internal endpoint"}';
}

# Block metrics endpoints (use /prometheus/ instead)
location = /metrics {
    return 403 '{"error":"Forbidden","message":"Internal endpoint"}';
}

# Block direct service ports
location ~ /(8080|8081|8083|9090|9091|5432|9092|9200)/ {
    return 403 '{"error":"Forbidden","message":"Direct service access forbidden"}';
}

# ============================================================================
# Security - Block Common Attack Patterns
# ============================================================================

# Block .git directory access
location ~ /\.git {
    deny all;
    return 404;
}

# Block hidden files
location ~ /\. {
    deny all;
    return 404;
}

# Block backup and config files
location ~ \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
    deny all;
    return 404;
}

# Block PHP execution (not used in this project)
location ~ \.php$ {
    deny all;
    return 404;
}

# Block suspicious query strings
if ($query_string ~* "(union|select|insert|drop|update|delete|exec|script|javascript|alert)") {
    return 403;
}

# Block suspicious user agents
if ($http_user_agent ~* (wget|curl|python-requests|scrapy|spider|bot|scanner)) {
    # Comment out to allow legitimate API clients like curl
    # return 403;
}

# ============================================================================
# Custom Error Pages
# ============================================================================

error_page 401 @error401;
location @error401 {
    default_type application/json;
    return 401 '{"error":"Unauthorized","message":"Authentication required","status":401}';
}

error_page 403 @error403;
location @error403 {
    default_type application/json;
    return 403 '{"error":"Forbidden","message":"Access denied","status":403}';
}

error_page 404 @error404;
location @error404 {
    default_type application/json;
    return 404 '{"error":"Not Found","message":"Resource not found","status":404}';
}

error_page 429 @error429;
location @error429 {
    default_type application/json;
    return 429 '{"error":"Too Many Requests","message":"Rate limit exceeded","status":429}';
}

error_page 500 502 503 504 @error5xx;
location @error5xx {
    default_type application/json;
    return 500 '{"error":"Internal Server Error","message":"Service temporarily unavailable","status":$status}';
}

