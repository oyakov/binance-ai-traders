# Binance AI Traders - Nginx Reverse Proxy Configuration
# ============================================================================
# Security-hardened reverse proxy for testnet deployment
# 
# Features:
# - TLS 1.3 encryption
# - Rate limiting
# - Security headers
# - Request size limits
# - Internal service proxying
# ============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance settings
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ========================================================================
    # Logging Configuration
    # ========================================================================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format security '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status '
                       '$request_time $upstream_response_time '
                       '$http_x_api_key';

    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/security.log security;

    # ========================================================================
    # Performance Settings
    # ========================================================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;  # Hide nginx version

    # ========================================================================
    # Security Settings
    # ========================================================================
    
    # Request size limits
    client_max_body_size 10k;
    client_body_buffer_size 10k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;

    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    # ========================================================================
    # Rate Limiting Zones
    # ========================================================================
    
    # General API rate limit: 10 requests per minute per IP
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/m;
    
    # Burst rate limit: 20 requests per second per IP
    limit_req_zone $binary_remote_addr zone=burst_limit:10m rate=20r/s;
    
    # Health check rate limit: 60 requests per minute
    limit_req_zone $binary_remote_addr zone=health_limit:10m rate=60r/m;
    
    # Connection limit: 10 concurrent connections per IP
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Rate limit log level
    limit_req_log_level warn;
    limit_req_status 429;

    # ========================================================================
    # Gzip Compression
    # ========================================================================
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/rss+xml application/atom+xml;
    gzip_disable "msie6";

    # ========================================================================
    # SSL/TLS Configuration
    # ========================================================================
    
    # SSL protocols and ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    # SSL session settings
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # ========================================================================
    # Security Headers (applied to all responses)
    # ========================================================================
    
    # Prevent clickjacking
    add_header X-Frame-Options "DENY" always;
    
    # Prevent MIME type sniffing
    add_header X-Content-Type-Options "nosniff" always;
    
    # Enable XSS protection
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';" always;
    
    # Referrer Policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Permissions Policy
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()" always;

    # ========================================================================
    # Upstream Service Definitions
    # ========================================================================
    
    upstream trader_macd {
        server binance-trader-macd-testnet:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream data_collection {
        server binance-data-collection-testnet:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream data_storage {
        server binance-data-storage-testnet:8081 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream grafana {
        server grafana-testnet:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream prometheus {
        server prometheus-testnet:9090 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # ========================================================================
    # HTTP to HTTPS Redirect
    # ========================================================================
    
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Allow Let's Encrypt ACME challenge
        location ^~ /.well-known/acme-challenge/ {
            default_type "text/plain";
            root /var/www/certbot;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # ========================================================================
    # Main HTTPS Server Configuration
    # ========================================================================
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;  # Replace with your domain

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # HSTS (HTTP Strict Transport Security)
        # Uncomment for production after testing HTTPS
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Connection limits
        limit_conn conn_limit 10;

        # Root location - redirect to Grafana dashboard
        location = / {
            return 302 /grafana/;
        }

        # ====================================================================
        # Health Check Endpoint (Public, Rate Limited)
        # ====================================================================
        
        location /health {
            limit_req zone=health_limit burst=10 nodelay;
            
            default_type application/json;
            return 200 '{"status":"healthy","service":"binance-ai-traders-testnet","timestamp":"$time_iso8601"}';
            
            access_log off;
        }

        # ====================================================================
        # API Endpoints (Authenticated, Rate Limited)
        # ====================================================================
        
        location /api/ {
            # Rate limiting
            limit_req zone=api_limit burst=5 nodelay;
            
            # API key authentication (basic check)
            # More sophisticated auth should be in application layer
            if ($http_x_api_key = "") {
                return 401 '{"error":"API key required","message":"Provide X-API-Key header"}';
            }

            # Proxy to appropriate service based on path
            # /api/v1/trader/* -> trader-macd
            # /api/v1/collection/* -> data-collection
            # /api/v1/storage/* -> data-storage
            
            # Default proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-API-Key $http_x_api_key;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Disable proxy caching for API endpoints
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }

        # Include service-specific routing
        include /etc/nginx/conf.d/*.conf;
    }

    # ========================================================================
    # Block Direct IP Access (Optional Security Measure)
    # ========================================================================
    
    # Uncomment to block direct IP access and require domain name
    # server {
    #     listen 443 ssl http2 default_server;
    #     listen [::]:443 ssl http2 default_server;
    #     server_name _;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #
    #     return 444;  # Close connection without response
    # }
}

