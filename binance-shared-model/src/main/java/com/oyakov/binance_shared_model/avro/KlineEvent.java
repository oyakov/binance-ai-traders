/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.oyakov.binance_shared_model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class KlineEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4515704415327733047L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KlineEvent\",\"namespace\":\"com.oyakov.binance_shared_model.avro\",\"fields\":[{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventTime\",\"type\":\"long\"},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"interval\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"openTime\",\"type\":\"long\"},{\"name\":\"closeTime\",\"type\":\"long\"},{\"name\":\"open\",\"type\":\"double\"},{\"name\":\"high\",\"type\":\"double\"},{\"name\":\"low\",\"type\":\"double\"},{\"name\":\"close\",\"type\":\"double\"},{\"name\":\"volume\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<KlineEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KlineEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KlineEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KlineEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KlineEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KlineEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KlineEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KlineEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KlineEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String eventType;
  private long eventTime;
  private java.lang.String symbol;
  private java.lang.String interval;
  private long openTime;
  private long closeTime;
  private double open;
  private double high;
  private double low;
  private double close;
  private double volume;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KlineEvent() {}

  /**
   * All-args constructor.
   * @param eventType The new value for eventType
   * @param eventTime The new value for eventTime
   * @param symbol The new value for symbol
   * @param interval The new value for interval
   * @param openTime The new value for openTime
   * @param closeTime The new value for closeTime
   * @param open The new value for open
   * @param high The new value for high
   * @param low The new value for low
   * @param close The new value for close
   * @param volume The new value for volume
   */
  public KlineEvent(java.lang.String eventType, java.lang.Long eventTime, java.lang.String symbol, java.lang.String interval, java.lang.Long openTime, java.lang.Long closeTime, java.lang.Double open, java.lang.Double high, java.lang.Double low, java.lang.Double close, java.lang.Double volume) {
    this.eventType = eventType;
    this.eventTime = eventTime;
    this.symbol = symbol;
    this.interval = interval;
    this.openTime = openTime;
    this.closeTime = closeTime;
    this.open = open;
    this.high = high;
    this.low = low;
    this.close = close;
    this.volume = volume;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventType;
    case 1: return eventTime;
    case 2: return symbol;
    case 3: return interval;
    case 4: return openTime;
    case 5: return closeTime;
    case 6: return open;
    case 7: return high;
    case 8: return low;
    case 9: return close;
    case 10: return volume;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventType = value$ != null ? value$.toString() : null; break;
    case 1: eventTime = (java.lang.Long)value$; break;
    case 2: symbol = value$ != null ? value$.toString() : null; break;
    case 3: interval = value$ != null ? value$.toString() : null; break;
    case 4: openTime = (java.lang.Long)value$; break;
    case 5: closeTime = (java.lang.Long)value$; break;
    case 6: open = (java.lang.Double)value$; break;
    case 7: high = (java.lang.Double)value$; break;
    case 8: low = (java.lang.Double)value$; break;
    case 9: close = (java.lang.Double)value$; break;
    case 10: volume = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.String getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public long getEventTime() {
    return eventTime;
  }


  /**
   * Sets the value of the 'eventTime' field.
   * @param value the value to set.
   */
  public void setEventTime(long value) {
    this.eventTime = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.String getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'interval' field.
   * @return The value of the 'interval' field.
   */
  public java.lang.String getInterval() {
    return interval;
  }


  /**
   * Sets the value of the 'interval' field.
   * @param value the value to set.
   */
  public void setInterval(java.lang.String value) {
    this.interval = value;
  }

  /**
   * Gets the value of the 'openTime' field.
   * @return The value of the 'openTime' field.
   */
  public long getOpenTime() {
    return openTime;
  }


  /**
   * Sets the value of the 'openTime' field.
   * @param value the value to set.
   */
  public void setOpenTime(long value) {
    this.openTime = value;
  }

  /**
   * Gets the value of the 'closeTime' field.
   * @return The value of the 'closeTime' field.
   */
  public long getCloseTime() {
    return closeTime;
  }


  /**
   * Sets the value of the 'closeTime' field.
   * @param value the value to set.
   */
  public void setCloseTime(long value) {
    this.closeTime = value;
  }

  /**
   * Gets the value of the 'open' field.
   * @return The value of the 'open' field.
   */
  public double getOpen() {
    return open;
  }


  /**
   * Sets the value of the 'open' field.
   * @param value the value to set.
   */
  public void setOpen(double value) {
    this.open = value;
  }

  /**
   * Gets the value of the 'high' field.
   * @return The value of the 'high' field.
   */
  public double getHigh() {
    return high;
  }


  /**
   * Sets the value of the 'high' field.
   * @param value the value to set.
   */
  public void setHigh(double value) {
    this.high = value;
  }

  /**
   * Gets the value of the 'low' field.
   * @return The value of the 'low' field.
   */
  public double getLow() {
    return low;
  }


  /**
   * Sets the value of the 'low' field.
   * @param value the value to set.
   */
  public void setLow(double value) {
    this.low = value;
  }

  /**
   * Gets the value of the 'close' field.
   * @return The value of the 'close' field.
   */
  public double getClose() {
    return close;
  }


  /**
   * Sets the value of the 'close' field.
   * @param value the value to set.
   */
  public void setClose(double value) {
    this.close = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public double getVolume() {
    return volume;
  }


  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(double value) {
    this.volume = value;
  }

  /**
   * Creates a new KlineEvent RecordBuilder.
   * @return A new KlineEvent RecordBuilder
   */
  public static com.oyakov.binance_shared_model.avro.KlineEvent.Builder newBuilder() {
    return new com.oyakov.binance_shared_model.avro.KlineEvent.Builder();
  }

  /**
   * Creates a new KlineEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KlineEvent RecordBuilder
   */
  public static com.oyakov.binance_shared_model.avro.KlineEvent.Builder newBuilder(com.oyakov.binance_shared_model.avro.KlineEvent.Builder other) {
    if (other == null) {
      return new com.oyakov.binance_shared_model.avro.KlineEvent.Builder();
    } else {
      return new com.oyakov.binance_shared_model.avro.KlineEvent.Builder(other);
    }
  }

  /**
   * Creates a new KlineEvent RecordBuilder by copying an existing KlineEvent instance.
   * @param other The existing instance to copy.
   * @return A new KlineEvent RecordBuilder
   */
  public static com.oyakov.binance_shared_model.avro.KlineEvent.Builder newBuilder(com.oyakov.binance_shared_model.avro.KlineEvent other) {
    if (other == null) {
      return new com.oyakov.binance_shared_model.avro.KlineEvent.Builder();
    } else {
      return new com.oyakov.binance_shared_model.avro.KlineEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for KlineEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KlineEvent>
    implements org.apache.avro.data.RecordBuilder<KlineEvent> {

    private java.lang.String eventType;
    private long eventTime;
    private java.lang.String symbol;
    private java.lang.String interval;
    private long openTime;
    private long closeTime;
    private double open;
    private double high;
    private double low;
    private double close;
    private double volume;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.oyakov.binance_shared_model.avro.KlineEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[1].schema(), other.eventTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.symbol)) {
        this.symbol = data().deepCopy(fields()[2].schema(), other.symbol);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.interval)) {
        this.interval = data().deepCopy(fields()[3].schema(), other.interval);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.openTime)) {
        this.openTime = data().deepCopy(fields()[4].schema(), other.openTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.closeTime)) {
        this.closeTime = data().deepCopy(fields()[5].schema(), other.closeTime);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.open)) {
        this.open = data().deepCopy(fields()[6].schema(), other.open);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.high)) {
        this.high = data().deepCopy(fields()[7].schema(), other.high);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.low)) {
        this.low = data().deepCopy(fields()[8].schema(), other.low);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.close)) {
        this.close = data().deepCopy(fields()[9].schema(), other.close);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.volume)) {
        this.volume = data().deepCopy(fields()[10].schema(), other.volume);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing KlineEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.oyakov.binance_shared_model.avro.KlineEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[1].schema(), other.eventTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.symbol)) {
        this.symbol = data().deepCopy(fields()[2].schema(), other.symbol);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.interval)) {
        this.interval = data().deepCopy(fields()[3].schema(), other.interval);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.openTime)) {
        this.openTime = data().deepCopy(fields()[4].schema(), other.openTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.closeTime)) {
        this.closeTime = data().deepCopy(fields()[5].schema(), other.closeTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.open)) {
        this.open = data().deepCopy(fields()[6].schema(), other.open);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.high)) {
        this.high = data().deepCopy(fields()[7].schema(), other.high);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.low)) {
        this.low = data().deepCopy(fields()[8].schema(), other.low);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.close)) {
        this.close = data().deepCopy(fields()[9].schema(), other.close);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.volume)) {
        this.volume = data().deepCopy(fields()[10].schema(), other.volume);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setEventType(java.lang.String value) {
      validate(fields()[0], value);
      this.eventType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public long getEventTime() {
      return eventTime;
    }


    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setEventTime(long value) {
      validate(fields()[1], value);
      this.eventTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearEventTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setSymbol(java.lang.String value) {
      validate(fields()[2], value);
      this.symbol = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'interval' field.
      * @return The value.
      */
    public java.lang.String getInterval() {
      return interval;
    }


    /**
      * Sets the value of the 'interval' field.
      * @param value The value of 'interval'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setInterval(java.lang.String value) {
      validate(fields()[3], value);
      this.interval = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'interval' field has been set.
      * @return True if the 'interval' field has been set, false otherwise.
      */
    public boolean hasInterval() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'interval' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearInterval() {
      interval = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'openTime' field.
      * @return The value.
      */
    public long getOpenTime() {
      return openTime;
    }


    /**
      * Sets the value of the 'openTime' field.
      * @param value The value of 'openTime'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setOpenTime(long value) {
      validate(fields()[4], value);
      this.openTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'openTime' field has been set.
      * @return True if the 'openTime' field has been set, false otherwise.
      */
    public boolean hasOpenTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'openTime' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearOpenTime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'closeTime' field.
      * @return The value.
      */
    public long getCloseTime() {
      return closeTime;
    }


    /**
      * Sets the value of the 'closeTime' field.
      * @param value The value of 'closeTime'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setCloseTime(long value) {
      validate(fields()[5], value);
      this.closeTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'closeTime' field has been set.
      * @return True if the 'closeTime' field has been set, false otherwise.
      */
    public boolean hasCloseTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'closeTime' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearCloseTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'open' field.
      * @return The value.
      */
    public double getOpen() {
      return open;
    }


    /**
      * Sets the value of the 'open' field.
      * @param value The value of 'open'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setOpen(double value) {
      validate(fields()[6], value);
      this.open = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'open' field has been set.
      * @return True if the 'open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'open' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearOpen() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * @return The value.
      */
    public double getHigh() {
      return high;
    }


    /**
      * Sets the value of the 'high' field.
      * @param value The value of 'high'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setHigh(double value) {
      validate(fields()[7], value);
      this.high = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'high' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearHigh() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'low' field.
      * @return The value.
      */
    public double getLow() {
      return low;
    }


    /**
      * Sets the value of the 'low' field.
      * @param value The value of 'low'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setLow(double value) {
      validate(fields()[8], value);
      this.low = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'low' field has been set.
      * @return True if the 'low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'low' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearLow() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'close' field.
      * @return The value.
      */
    public double getClose() {
      return close;
    }


    /**
      * Sets the value of the 'close' field.
      * @param value The value of 'close'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setClose(double value) {
      validate(fields()[9], value);
      this.close = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'close' field has been set.
      * @return True if the 'close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'close' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearClose() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public double getVolume() {
      return volume;
    }


    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder setVolume(double value) {
      validate(fields()[10], value);
      this.volume = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public com.oyakov.binance_shared_model.avro.KlineEvent.Builder clearVolume() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KlineEvent build() {
      try {
        KlineEvent record = new KlineEvent();
        record.eventType = fieldSetFlags()[0] ? this.eventType : (java.lang.String) defaultValue(fields()[0]);
        record.eventTime = fieldSetFlags()[1] ? this.eventTime : (java.lang.Long) defaultValue(fields()[1]);
        record.symbol = fieldSetFlags()[2] ? this.symbol : (java.lang.String) defaultValue(fields()[2]);
        record.interval = fieldSetFlags()[3] ? this.interval : (java.lang.String) defaultValue(fields()[3]);
        record.openTime = fieldSetFlags()[4] ? this.openTime : (java.lang.Long) defaultValue(fields()[4]);
        record.closeTime = fieldSetFlags()[5] ? this.closeTime : (java.lang.Long) defaultValue(fields()[5]);
        record.open = fieldSetFlags()[6] ? this.open : (java.lang.Double) defaultValue(fields()[6]);
        record.high = fieldSetFlags()[7] ? this.high : (java.lang.Double) defaultValue(fields()[7]);
        record.low = fieldSetFlags()[8] ? this.low : (java.lang.Double) defaultValue(fields()[8]);
        record.close = fieldSetFlags()[9] ? this.close : (java.lang.Double) defaultValue(fields()[9]);
        record.volume = fieldSetFlags()[10] ? this.volume : (java.lang.Double) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KlineEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<KlineEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KlineEvent>
    READER$ = (org.apache.avro.io.DatumReader<KlineEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventType);

    out.writeLong(this.eventTime);

    out.writeString(this.symbol);

    out.writeString(this.interval);

    out.writeLong(this.openTime);

    out.writeLong(this.closeTime);

    out.writeDouble(this.open);

    out.writeDouble(this.high);

    out.writeDouble(this.low);

    out.writeDouble(this.close);

    out.writeDouble(this.volume);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventType = in.readString();

      this.eventTime = in.readLong();

      this.symbol = in.readString();

      this.interval = in.readString();

      this.openTime = in.readLong();

      this.closeTime = in.readLong();

      this.open = in.readDouble();

      this.high = in.readDouble();

      this.low = in.readDouble();

      this.close = in.readDouble();

      this.volume = in.readDouble();

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventType = in.readString();
          break;

        case 1:
          this.eventTime = in.readLong();
          break;

        case 2:
          this.symbol = in.readString();
          break;

        case 3:
          this.interval = in.readString();
          break;

        case 4:
          this.openTime = in.readLong();
          break;

        case 5:
          this.closeTime = in.readLong();
          break;

        case 6:
          this.open = in.readDouble();
          break;

        case 7:
          this.high = in.readDouble();
          break;

        case 8:
          this.low = in.readDouble();
          break;

        case 9:
          this.close = in.readDouble();
          break;

        case 10:
          this.volume = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










