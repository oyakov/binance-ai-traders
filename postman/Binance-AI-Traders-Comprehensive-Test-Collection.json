{
  "info": {
    "name": "Binance AI Traders - Comprehensive Test Collection",
    "description": "Comprehensive test collection for all system components including health checks, API testing, monitoring validation, and data flow testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "item": [
    {
      "name": "1. System Health Checks",
      "item": [
        {
          "name": "1.1 Trading Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/health",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Trading Service Health Check', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('UP');",
                  "});",
                  "",
                  "pm.test('Trading Service Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});",
                  "",
                  "pm.test('Trading Service Health Details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('components');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.2 Data Collection Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{data_collection_port}}/actuator/health",
              "host": ["{{base_url}}"],
              "port": "{{data_collection_port}}",
              "path": ["actuator", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Data Collection Service Health Check', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('UP');",
                  "});",
                  "",
                  "pm.test('Data Collection Service Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.3 PostgreSQL Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{postgres_port}}/",
              "host": ["{{base_url}}"],
              "port": "{{postgres_port}}",
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('PostgreSQL Port Connectivity', function () {",
                  "    // PostgreSQL doesn't have HTTP health endpoint, so we check port connectivity",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405]);",
                  "});",
                  "",
                  "pm.test('PostgreSQL Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.4 Elasticsearch Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{elasticsearch_port}}/_cluster/health",
              "host": ["{{base_url}}"],
              "port": "{{elasticsearch_port}}",
              "path": ["_cluster", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Elasticsearch Cluster Health', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.be.oneOf(['green', 'yellow']);",
                  "});",
                  "",
                  "pm.test('Elasticsearch Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});",
                  "",
                  "pm.test('Elasticsearch Cluster Details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('cluster_name');",
                  "    pm.expect(response).to.have.property('number_of_nodes');",
                  "    pm.expect(response.number_of_nodes).to.be.at.least(1);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.5 Kafka Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{kafka_port}}/",
              "host": ["{{base_url}}"],
              "port": "{{kafka_port}}",
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Kafka Port Connectivity', function () {",
                  "    // Kafka doesn't have HTTP health endpoint, so we check port connectivity",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405]);",
                  "});",
                  "",
                  "pm.test('Kafka Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.6 Prometheus Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{prometheus_port}}/-/healthy",
              "host": ["{{base_url}}"],
              "port": "{{prometheus_port}}",
              "path": ["-", "healthy"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Prometheus Health Check', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.text).to.include('Prometheus is Healthy');",
                  "});",
                  "",
                  "pm.test('Prometheus Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.7 Grafana Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{grafana_port}}/api/health",
              "host": ["{{base_url}}"],
              "port": "{{grafana_port}}",
              "path": ["api", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Grafana Health Check', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.database).to.eql('ok');",
                  "});",
                  "",
                  "pm.test('Grafana Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});",
                  "",
                  "pm.test('Grafana Health Details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('database');",
                  "    pm.expect(response).to.have.property('version');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2. Binance API Integration Tests",
      "item": [
        {
          "name": "2.1 Binance Testnet Ping",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{testnet_url}}/api/v3/ping",
              "host": ["{{testnet_url}}"],
              "path": ["api", "v3", "ping"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Binance Testnet Ping', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Binance Testnet Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.2 Binance Testnet Server Time",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{testnet_url}}/api/v3/time",
              "host": ["{{testnet_url}}"],
              "path": ["api", "v3", "time"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Binance Testnet Server Time', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('serverTime');",
                  "    pm.expect(response.serverTime).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Server Time is Recent', function () {",
                  "    const response = pm.response.json();",
                  "    const serverTime = response.serverTime;",
                  "    const currentTime = Date.now();",
                  "    const timeDiff = Math.abs(currentTime - serverTime);",
                  "    pm.expect(timeDiff).to.be.below(60000); // Within 1 minute",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.3 Binance Testnet Account Info",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-MBX-APIKEY",
                "value": "{{api_key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{testnet_url}}/api/v3/account?timestamp={{$timestamp}}&signature={{$signature}}",
              "host": ["{{testnet_url}}"],
              "path": ["api", "v3", "account"],
              "query": [
                {
                  "key": "timestamp",
                  "value": "{{$timestamp}}"
                },
                {
                  "key": "signature",
                  "value": "{{$signature}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate timestamp",
                  "const timestamp = Date.now();",
                  "pm.environment.set('$timestamp', timestamp);",
                  "",
                  "// Generate signature",
                  "const crypto = require('crypto-js');",
                  "const queryString = `timestamp=${timestamp}`;",
                  "const signature = crypto.HmacSHA256(queryString, pm.environment.get('api_secret')).toString();",
                  "pm.environment.set('$signature', signature);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Binance Testnet Account Info', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accountType');",
                  "    pm.expect(response).to.have.property('balances');",
                  "});",
                  "",
                  "pm.test('Account Type is SPOT', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.accountType).to.eql('SPOT');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.4 Binance Testnet Kline Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{testnet_url}}/api/v3/klines?symbol={{test_symbol}}&interval={{test_interval}}&limit={{test_limit}}",
              "host": ["{{testnet_url}}"],
              "path": ["api", "v3", "klines"],
              "query": [
                {
                  "key": "symbol",
                  "value": "{{test_symbol}}"
                },
                {
                  "key": "interval",
                  "value": "{{test_interval}}"
                },
                {
                  "key": "limit",
                  "value": "{{test_limit}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Binance Testnet Kline Data', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.at.least(1);",
                  "});",
                  "",
                  "pm.test('Kline Data Structure', function () {",
                  "    const response = pm.response.json();",
                  "    const kline = response[0];",
                  "    pm.expect(kline).to.be.an('array');",
                  "    pm.expect(kline.length).to.eql(12); // Kline has 12 fields",
                  "});",
                  "",
                  "pm.test('Kline Data Validation', function () {",
                  "    const response = pm.response.json();",
                  "    const kline = response[0];",
                  "    pm.expect(parseFloat(kline[1])).to.be.at.least(0); // Open price",
                  "    pm.expect(parseFloat(kline[2])).to.be.at.least(0); // High price",
                  "    pm.expect(parseFloat(kline[3])).to.be.at.least(0); // Low price",
                  "    pm.expect(parseFloat(kline[4])).to.be.at.least(0); // Close price",
                  "    pm.expect(parseFloat(kline[5])).to.be.at.least(0); // Volume",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "3. Service Metrics and Monitoring",
      "item": [
        {
          "name": "3.1 Trading Service Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/prometheus",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "prometheus"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Trading Service Metrics Available', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.text).to.include('jvm_');",
                  "});",
                  "",
                  "pm.test('Trading Service JVM Metrics', function () {",
                  "    const metrics = pm.response.text;",
                  "    pm.expect(metrics).to.include('jvm_memory_used_bytes');",
                  "    pm.expect(metrics).to.include('jvm_gc_pause_seconds');",
                  "    pm.expect(metrics).to.include('http_server_requests_seconds');",
                  "});",
                  "",
                  "pm.test('Trading Service Custom Metrics', function () {",
                  "    const metrics = pm.response.text;",
                  "    pm.expect(metrics).to.include('binance_trader_');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3.2 Data Collection Service Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{data_collection_port}}/actuator/prometheus",
              "host": ["{{base_url}}"],
              "port": "{{data_collection_port}}",
              "path": ["actuator", "prometheus"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Data Collection Service Metrics Available', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.text).to.include('jvm_');",
                  "});",
                  "",
                  "pm.test('Data Collection Service JVM Metrics', function () {",
                  "    const metrics = pm.response.text;",
                  "    pm.expect(metrics).to.include('jvm_memory_used_bytes');",
                  "    pm.expect(metrics).to.include('jvm_gc_pause_seconds');",
                  "    pm.expect(metrics).to.include('http_server_requests_seconds');",
                  "});",
                  "",
                  "pm.test('Data Collection Service Custom Metrics', function () {",
                  "    const metrics = pm.response.text;",
                  "    pm.expect(metrics).to.include('binance_data_collection_');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3.3 Prometheus Targets Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{prometheus_port}}/api/v1/targets",
              "host": ["{{base_url}}"],
              "port": "{{prometheus_port}}",
              "path": ["api", "v1", "targets"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Prometheus Targets API', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('activeTargets');",
                  "});",
                  "",
                  "pm.test('Trading Service Target is UP', function () {",
                  "    const response = pm.response.json();",
                  "    const targets = response.data.activeTargets;",
                  "    const tradingTarget = targets.find(t => t.job === 'binance-trader-macd-testnet');",
                  "    pm.expect(tradingTarget).to.exist;",
                  "    pm.expect(tradingTarget.health).to.eql('up');",
                  "});",
                  "",
                  "pm.test('All Critical Targets are UP', function () {",
                  "    const response = pm.response.json();",
                  "    const targets = response.data.activeTargets;",
                  "    const criticalJobs = ['binance-trader-macd-testnet', 'prometheus'];",
                  "    ",
                  "    criticalJobs.forEach(job => {",
                  "        const target = targets.find(t => t.job === job);",
                  "        pm.expect(target).to.exist;",
                  "        pm.expect(target.health).to.eql('up');",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3.4 Prometheus Query - System Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{prometheus_port}}/api/v1/query?query=up",
              "host": ["{{base_url}}"],
              "port": "{{prometheus_port}}",
              "path": ["api", "v1", "query"],
              "query": [
                {
                  "key": "query",
                  "value": "up"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Prometheus Query API', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.status).to.eql('success');",
                  "});",
                  "",
                  "pm.test('Up Metrics Available', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('result');",
                  "    pm.expect(response.data.result).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Trading Service is UP in Prometheus', function () {",
                  "    const response = pm.response.json();",
                  "    const results = response.data.result;",
                  "    const tradingService = results.find(r => r.metric.job === 'binance-trader-macd-testnet');",
                  "    pm.expect(tradingService).to.exist;",
                  "    pm.expect(tradingService.value[1]).to.eql('1');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3.5 Grafana Data Source Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic YWRtaW46dGVzdG5ldF9hZG1pbg==",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{grafana_port}}/api/datasources",
              "host": ["{{base_url}}"],
              "port": "{{grafana_port}}",
              "path": ["api", "datasources"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Grafana Data Sources API', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Prometheus Data Source Exists', function () {",
                  "    const response = pm.response.json();",
                  "    const prometheusDS = response.find(ds => ds.type === 'prometheus');",
                  "    pm.expect(prometheusDS).to.exist;",
                  "    pm.expect(prometheusDS.url).to.include('prometheus');",
                  "});",
                  "",
                  "pm.test('Data Source is Accessible', function () {",
                  "    const response = pm.response.json();",
                  "    const prometheusDS = response.find(ds => ds.type === 'prometheus');",
                  "    pm.expect(prometheusDS).to.have.property('access');",
                  "    pm.expect(prometheusDS.access).to.eql('proxy');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "4. Data Flow and Integration Tests",
      "item": [
        {
          "name": "4.1 Kafka Topics Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{schema_registry_port}}/subjects",
              "host": ["{{base_url}}"],
              "port": "{{schema_registry_port}}",
              "path": ["subjects"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Schema Registry API', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "4.2 Elasticsearch Index Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{elasticsearch_port}}/_cat/indices?v",
              "host": ["{{base_url}}"],
              "port": "{{elasticsearch_port}}",
              "path": ["_cat", "indices"],
              "query": [
                {
                  "key": "v",
                  "value": ""
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Elasticsearch Indices API', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.text).to.include('health');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "4.3 PostgreSQL Database Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/health/db",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "health", "db"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('PostgreSQL Database Health', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('UP');",
                  "});",
                  "",
                  "pm.test('Database Connection Details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('details');",
                  "    pm.expect(response.details).to.have.property('database');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "5. Performance and Load Tests",
      "item": [
        {
          "name": "5.1 Trading Service Load Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/metrics",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "metrics"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Trading Service Metrics API', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('names');",
                  "    pm.expect(response.names).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('JVM Metrics Available', function () {",
                  "    const response = pm.response.json();",
                  "    const jvmMetrics = response.names.filter(name => name.startsWith('jvm.'));",
                  "    pm.expect(jvmMetrics.length).to.be.at.least(10);",
                  "});",
                  "",
                  "pm.test('HTTP Metrics Available', function () {",
                  "    const response = pm.response.json();",
                  "    const httpMetrics = response.names.filter(name => name.startsWith('http.server.requests'));",
                  "    pm.expect(httpMetrics.length).to.be.at.least(1);",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "5.2 Memory Usage Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/metrics/jvm.memory.used",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "metrics", "jvm.memory.used"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Memory Usage Metrics', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('measurements');",
                  "    pm.expect(response.measurements).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Memory Usage is Reasonable', function () {",
                  "    const response = pm.response.json();",
                  "    const measurements = response.measurements;",
                  "    const totalMemory = measurements.find(m => m.statistic === 'VALUE');",
                  "    pm.expect(totalMemory).to.exist;",
                  "    pm.expect(totalMemory.value).to.be.at.least(0);",
                  "    pm.expect(totalMemory.value).to.be.below(1073741824); // Less than 1GB",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "5.3 HTTP Request Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/metrics/http.server.requests",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "metrics", "http.server.requests"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('HTTP Request Metrics', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('measurements');",
                  "    pm.expect(response.measurements).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Request Count is Positive', function () {",
                  "    const response = pm.response.json();",
                  "    const measurements = response.measurements;",
                  "    const countMetric = measurements.find(m => m.statistic === 'COUNT');",
                  "    pm.expect(countMetric).to.exist;",
                  "    pm.expect(countMetric.value).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "6. End-to-End Trading Flow Tests",
      "item": [
        {
          "name": "6.1 Trading Service Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/info",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "info"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Trading Service Info', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('app');",
                  "});",
                  "",
                  "pm.test('Application Details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.app).to.have.property('name');",
                  "    pm.expect(response.app).to.have.property('version');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "6.2 Trading Service Configuration",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/configprops",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "configprops"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Trading Service Configuration', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('contexts');",
                  "});",
                  "",
                  "pm.test('Response Time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get('test_timeout')));",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global pre-request script",
          "console.log('Starting test execution at:', new Date().toISOString());",
          "",
          "// Set test start time",
          "pm.environment.set('test_start_time', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test script",
          "const testEndTime = Date.now();",
          "const testStartTime = pm.environment.get('test_start_time');",
          "const totalTestTime = testEndTime - testStartTime;",
          "",
          "console.log('Test completed in:', totalTestTime, 'ms');",
          "",
          "// Log test results",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    console.log('✅ Test passed:', pm.info.name);",
          "} else {",
          "    console.log('❌ Test failed:', pm.info.name, 'Status:', pm.response.code);",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "collection_version",
      "value": "1.0.0",
      "type": "string"
    },
    {
      "key": "test_timeout",
      "value": "30000",
      "type": "string"
    },
    {
      "key": "retry_count",
      "value": "3",
      "type": "string"
    }
  ]
}
