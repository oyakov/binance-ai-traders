name: Rotate Secrets

on:
  workflow_dispatch:
    inputs:
      secrets_to_rotate:
        description: 'Which secrets to rotate'
        required: true
        type: choice
        options:
          - database_passwords
          - api_keys
          - age_keys
          - all
        default: 'database_passwords'
      
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - testnet
          - production
        default: 'testnet'
      
      confirm:
        description: 'Type YES to confirm rotation'
        required: true
        type: string
      
      deploy_after_rotation:
        description: 'Deploy after rotation'
        required: true
        type: boolean
        default: true

jobs:
  validate:
    name: Validate Rotation Request
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        run: |
          if [ "${{ inputs.confirm }}" != "YES" ]; then
            echo "❌ Rotation not confirmed"
            exit 1
          fi
          echo "✓ Rotation confirmed"
  
  rotate:
    name: Rotate Secrets - ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          if [ "${{ inputs.environment }}" == "production" ]; then
            echo "${{ secrets.PROD_VPS_SSH_KEY }}" > ~/.ssh/deploy_key
            VPS_HOST="${{ secrets.PROD_VPS_HOST }}"
            VPS_USER="${{ secrets.PROD_VPS_USER }}"
          else
            echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
            VPS_HOST="${{ secrets.VPS_HOST }}"
            VPS_USER="${{ secrets.VPS_USER }}"
          fi
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
          echo "VPS_HOST=$VPS_HOST" >> $GITHUB_ENV
          echo "VPS_USER=$VPS_USER" >> $GITHUB_ENV
      
      - name: Generate new passwords
        if: contains(inputs.secrets_to_rotate, 'database') || inputs.secrets_to_rotate == 'all'
        run: |
          # Generate strong random passwords
          POSTGRES_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
          ELASTIC_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
          
          echo "::add-mask::$POSTGRES_PASSWORD"
          echo "::add-mask::$ELASTIC_PASSWORD"
          
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> $GITHUB_ENV
          echo "ELASTIC_PASSWORD=$ELASTIC_PASSWORD" >> $GITHUB_ENV
          
          echo "✓ New database passwords generated"
      
      - name: Generate new API keys
        if: contains(inputs.secrets_to_rotate, 'api_keys') || inputs.secrets_to_rotate == 'all'
        run: |
          # Generate new API keys
          ADMIN_API_KEY=$(openssl rand -hex 32)
          MONITORING_API_KEY=$(openssl rand -hex 32)
          READONLY_API_KEY=$(openssl rand -hex 32)
          
          echo "::add-mask::$ADMIN_API_KEY"
          echo "::add-mask::$MONITORING_API_KEY"
          echo "::add-mask::$READONLY_API_KEY"
          
          echo "ADMIN_API_KEY=$ADMIN_API_KEY" >> $GITHUB_ENV
          echo "MONITORING_API_KEY=$MONITORING_API_KEY" >> $GITHUB_ENV
          echo "READONLY_API_KEY=$READONLY_API_KEY" >> $GITHUB_ENV
          
          echo "✓ New API keys generated"
      
      - name: Rotate age keys
        if: contains(inputs.secrets_to_rotate, 'age_keys') || inputs.secrets_to_rotate == 'all'
        run: |
          # Install age
          wget -q https://github.com/FiloSottile/age/releases/download/v1.1.1/age-v1.1.1-linux-amd64.tar.gz
          tar xzf age-v1.1.1-linux-amd64.tar.gz
          sudo mv age/age age/age-keygen /usr/local/bin/
          
          # Generate new age key
          age-keygen > new-age-key.txt
          NEW_AGE_PUBLIC_KEY=$(grep "public key:" new-age-key.txt | awk '{print $3}')
          NEW_AGE_SECRET_KEY=$(grep "AGE-SECRET-KEY" new-age-key.txt)
          
          echo "::add-mask::$NEW_AGE_SECRET_KEY"
          
          echo "NEW_AGE_PUBLIC_KEY=$NEW_AGE_PUBLIC_KEY" >> $GITHUB_ENV
          echo "NEW_AGE_SECRET_KEY=$NEW_AGE_SECRET_KEY" >> $GITHUB_ENV
          
          echo "✓ New age keys generated"
          echo "⚠️  Update GitHub Secret SOPS_AGE_KEY with new secret key"
          echo "⚠️  Update .sops.yaml with new public key: $NEW_AGE_PUBLIC_KEY"
      
      - name: Rotation summary
        run: |
          echo "## 🔄 Secrets Rotation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rotated:** ${{ inputs.secrets_to_rotate }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Update GitHub Secrets with new values" >> $GITHUB_STEP_SUMMARY
          echo "2. Update testnet.env with new values" >> $GITHUB_STEP_SUMMARY
          echo "3. Re-encrypt: \`sops -e testnet.env > testnet.env.enc\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Commit updated testnet.env.enc" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.secrets_to_rotate }}" == "age_keys" ] || [ "${{ inputs.secrets_to_rotate }}" == "all" ]; then
            echo "5. Update .sops.yaml with new age public key" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.deploy_after_rotation }}" == "true" ]; then
            echo "6. Trigger deployment to apply new secrets" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f new-age-key.txt

